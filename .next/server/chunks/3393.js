"use strict";exports.id=3393,exports.ids=[3393],exports.modules={26053:(a,b,c)=>{c.d(b,{$p:()=>p});var d=c(54659),e=c(33790);class f{static async createProject(a){return e.S.createProject(a)}static async updateProject(a,b){return e.S.updateProject(a,b)}static async deleteProject(a){return e.S.deleteProject(a)}static async hardDeleteProject(a){return e.S.deleteProject(a)}static async updateProjectStatus(a,b){return e.S.updateProjectStatus(a,b)}static async updateProjectProgress(a,b){return e.S.updateProjectProgress(a,b)}static async updateProjectBudget(a,b){return e.S.updateProjectBudget(a,b)}static async restoreProject(a){return e.S.updateProjectStatus(a,"ACTIVE")}static async bulkUpdateStatus(a,b){await Promise.all(a.map(a=>e.S.updateProjectStatus(a,b)))}static async assignProjectToClient(a,b){return e.S.assignProjectToClient(a,b)}static async updateProjectDates(a,b,c){return e.S.updateProjectDates(a,b,c)}}var g=c(70039),h=c(49888);class i{static async getProjectSummary(a){try{return(await g.L.getProjectSummary()).overview,{totalProjects:parseInt(result[0].total_projects),activeProjects:parseInt(result[0].active_projects),completedProjects:parseInt(result[0].completed_projects),onHoldProjects:parseInt(result[0].on_hold_projects),averageProgress:parseFloat(result[0].avg_progress)||0}}catch(a){return h.Rm.error("Error fetching project summary:",{data:a},"summary-analytics"),{totalProjects:0,activeProjects:0,completedProjects:0,onHoldProjects:0,averageProgress:0}}}static async getProjectsByStatus(a){try{let b=sql`status NOT IN ('archived', 'cancelled', 'deleted')`;return a?.startDate&&(b=sql`${b} AND created_at >= ${a.startDate.toISOString()}`),a?.endDate&&(b=sql`${b} AND created_at <= ${a.endDate.toISOString()}`),a?.clientId&&(b=sql`${b} AND client_id = ${a.clientId}`),a?.status&&a.status.length>0&&(b=sql`${b} AND status = ANY(${a.status})`),a?.includeInactive&&(b=sql`TRUE`),(await sql`
        SELECT status, COUNT(*) as count
        FROM projects
        WHERE ${b}
        GROUP BY status
        ORDER BY count DESC
      `).map(a=>({status:a.status,count:parseInt(a.count)}))}catch(a){return h.Rm.error("Error fetching projects by status:",{data:a},"summary-analytics"),[]}}static async getProjectsByClient(a){try{let b=sql`p.status NOT IN ('archived', 'cancelled', 'deleted')`;return a?.startDate&&(b=sql`${b} AND p.created_at >= ${a.startDate.toISOString()}`),a?.endDate&&(b=sql`${b} AND p.created_at <= ${a.endDate.toISOString()}`),a?.clientId&&(b=sql`${b} AND p.client_id = ${a.clientId}`),a?.status&&a.status.length>0&&(b=sql`${b} AND p.status = ANY(${a.status})`),a?.includeInactive&&(b=sql`TRUE`),(await sql`
        SELECT 
          c.id as client_id,
          c.name as client_name,
          COUNT(p.id) as project_count,
          COALESCE(SUM(p.budget), 0) as total_budget
        FROM clients c
        LEFT JOIN projects p ON c.id = p.client_id AND ${b}
        GROUP BY c.id, c.name
        HAVING COUNT(p.id) > 0
        ORDER BY project_count DESC
      `).map(a=>({clientId:a.client_id,clientName:a.client_name,projectCount:parseInt(a.project_count),totalBudget:parseFloat(a.total_budget)||0}))}catch(a){return h.Rm.error("Error fetching projects by client:",{data:a},"summary-analytics"),[]}}static async getTopClients(a=10){try{return(await sql`
        SELECT 
          c.id as client_id,
          c.name as client_name,
          COUNT(p.id) as project_count,
          COALESCE(SUM(p.budget), 0) as total_budget,
          COALESCE(AVG(p.budget), 0) as avg_project_value,
          COALESCE(
            COUNT(CASE WHEN p.status = 'COMPLETED' THEN 1 END)::float / 
            NULLIF(COUNT(p.id), 0) * 100, 
            0
          ) as completion_rate
        FROM clients c
        LEFT JOIN projects p ON c.id = p.client_id AND p.status NOT IN ('archived', 'cancelled', 'deleted')
        GROUP BY c.id, c.name
        HAVING COUNT(p.id) > 0
        ORDER BY total_budget DESC
        LIMIT ${a}
      `).map(a=>({clientId:a.client_id,clientName:a.client_name,metrics:{projectCount:parseInt(a.project_count),totalBudget:parseFloat(a.total_budget),avgProjectValue:parseFloat(a.avg_project_value),completionRate:parseFloat(a.completion_rate)}}))}catch(a){return h.Rm.error("Error fetching top clients:",{data:a},"summary-analytics"),[]}}static async getProjectDistribution(){try{let[a,b,c]=await Promise.all([this.getProjectsByStatus(),sql`
          SELECT 
            COALESCE(type, 'Unknown') as type, 
            COUNT(*) as count
          FROM projects
          WHERE status NOT IN ('archived', 'cancelled', 'deleted')
          GROUP BY type
          ORDER BY count DESC
        `,sql`
          SELECT 
            COALESCE(priority, 'Medium') as priority, 
            COUNT(*) as count
          FROM projects
          WHERE status NOT IN ('archived', 'cancelled', 'deleted')
          GROUP BY priority
          ORDER BY count DESC
        `]);return{byStatus:a,byType:b.map(a=>({type:a.type,count:parseInt(a.count)})),byPriority:c.map(a=>({priority:a.priority,count:parseInt(a.count)}))}}catch(a){return h.Rm.error("Error fetching project distribution:",{data:a},"summary-analytics"),{byStatus:[],byType:[],byPriority:[]}}}static calculateGrowthRate(a,b){return 0===b?100*(a>0):(a-b)/b*100}static async getSummaryWithComparison(){let a=new Date,b=new Date(a.getTime()-2592e6),c=new Date(a.getTime()-5184e6),[d,e]=await Promise.all([this.getProjectSummary({startDate:b}),this.getProjectSummary({startDate:c,endDate:b})]);return{current:d,previous:e,growth:{totalProjects:this.calculateGrowthRate(d.totalProjects,e.totalProjects),activeProjects:this.calculateGrowthRate(d.activeProjects,e.activeProjects),completedProjects:this.calculateGrowthRate(d.completedProjects,e.completedProjects),averageProgress:this.calculateGrowthRate(d.averageProgress,e.averageProgress)}}}}class j{static async getOverdueProjects(a){try{let a=await g.L.getProjectPerformance("",["overdue"]);return a.metrics?.overdue||[]}catch(a){return h.Rm.error("Error fetching overdue projects:",{data:a},"performance-analytics"),[]}}static async getProjectPerformanceMetrics(a){try{let a=(await g.L.getProjectPerformance("",["onTime","budget","quality","efficiency"])).metrics||{};return{onTimeCompletionRate:a.onTime?.rate||0,averageProjectDuration:a.efficiency?.avgDuration||0,budgetUtilizationRate:a.budget?.utilizationRate||0,clientSatisfactionScore:4.2}}catch(a){return h.Rm.error("Error fetching project performance metrics:",{data:a},"performance-analytics"),{onTimeCompletionRate:0,averageProjectDuration:0,budgetUtilizationRate:0,clientSatisfactionScore:0}}}static async getPerformanceKPIs(){try{return(await g.L.getKPIs("performance")).map(a=>({name:a.name,value:a.value,target:a.target||0,trend:a.trend,unit:a.unit||"",description:a.description||""}))}catch(a){return h.Rm.error("Error calculating performance KPIs:",{data:a},"performance-analytics"),[]}}static async getEfficiencyAnalysis(){try{let a=(await g.L.getProjectPerformance("",["efficiency","quality"])).metrics||{};return{productivity:a.efficiency?.productivityScore||0,resourceUtilization:a.efficiency?.avgUtilization||0,deliverySpeed:100-(a.efficiency?.avgDuration||0),qualityScore:a.quality?.score||0}}catch(a){return h.Rm.error("Error calculating efficiency analysis:",{data:a},"performance-analytics"),{productivity:0,resourceUtilization:0,deliverySpeed:0,qualityScore:0}}}static async getRiskAssessment(){try{let a=await g.L.getProjectPerformance("",["risk"]),b=a.metrics?.risk||{};return{highRisk:b.highRisk||0,mediumRisk:b.mediumRisk||0,lowRisk:b.lowRisk||0,riskFactors:[{factor:"Deadline Pressure",impact:"high",projects:Math.round(.6*(b.highRisk||0))},{factor:"Budget Overrun",impact:"medium",projects:Math.round(.4*(b.mediumRisk||0))},{factor:"Low Progress Rate",impact:"medium",projects:Math.round(.3*(b.highRisk||0))}]}}catch(a){return h.Rm.error("Error calculating risk assessment:",{data:a},"performance-analytics"),{highRisk:0,mediumRisk:0,lowRisk:0,riskFactors:[]}}}static buildWhereClause(a){return"status NOT IN ('archived', 'cancelled', 'deleted')"}}class k{static async getMonthlyCompletionTrends(a=12){try{let b=new Date().toISOString(),c=new Date;c.setMonth(c.getMonth()-a);let d=await g.L.getProjectTrends("",{type:"monthly",startDate:c.toISOString(),endDate:b});return d.trends?.map(a=>({month:a.month,completed:a.completedProjects||0,started:a.newProjects||0}))||[]}catch(a){return h.Rm.error("Error fetching monthly completion trends:",{data:a},"trend-analytics"),[]}}static async getBudgetAnalysis(a){try{let b=await g.L.getBudgetAnalysis(a?.projectId,a?.clientId,a?.department);return{totalBudget:b.totalBudget||0,averageBudget:b.averageBudget||0,budgetByStatus:b.budgetByStatus||[]}}catch(a){return h.Rm.error("Error fetching budget analysis:",{data:a},"trend-analytics"),{totalBudget:0,averageBudget:0,budgetByStatus:[]}}}static async getProjectTimeline(a=52){try{let b=new Date;b.setDate(b.getDate()+7*a);let c=await g.L.getProjectTrends("",{type:"weekly",startDate:new Date().toISOString(),endDate:b.toISOString()});return c.timeline?.map(a=>({date:a.date,projectsStarting:a.projectsStarting||0,projectsEnding:a.projectsEnding||0,milestones:a.milestones||0}))||[]}catch(a){return h.Rm.error("Error fetching project timeline:",{data:a},"trend-analytics"),[]}}static async getQuarterlyTrends(a=4){try{let b=new Date;b.setMonth(b.getMonth()-3*a);let c=await g.L.getProjectTrends("",{type:"quarterly",startDate:b.toISOString(),endDate:new Date().toISOString()});return c.quarters?.map(a=>({quarter:a.quarter,projectsCompleted:a.projectsCompleted||0,totalBudget:a.totalBudget||0,averageProgress:a.averageProgress||0,clientCount:a.clientCount||0}))||[]}catch(a){return h.Rm.error("Error fetching quarterly trends:",{data:a},"trend-analytics"),[]}}static async getYearOverYearComparison(){try{let a=new Date().getFullYear(),b=a-1,c=await g.L.getProjectTrends("",{type:"yearly",startDate:`${a}-01-01`,endDate:`${a}-12-31`}),d=await g.L.getProjectTrends("",{type:"yearly",startDate:`${b}-01-01`,endDate:`${b}-12-31`}),e={projects:c.summary?.totalProjects||0,budget:c.summary?.totalBudget||0,completed:c.summary?.completedProjects||0},f={projects:d.summary?.totalProjects||0,budget:d.summary?.totalBudget||0,completed:d.summary?.completedProjects||0};return{currentYear:e,previousYear:f,growth:{projects:this.calculateGrowthRate(e.projects,f.projects),budget:this.calculateGrowthRate(e.budget,f.budget),completed:this.calculateGrowthRate(e.completed,f.completed)}}}catch(a){return h.Rm.error("Error fetching year-over-year comparison:",{data:a},"trend-analytics"),{currentYear:{projects:0,budget:0,completed:0},previousYear:{projects:0,budget:0,completed:0},growth:{projects:0,budget:0,completed:0}}}}static async getSeasonalTrends(){try{let a=new Date;a.setFullYear(a.getFullYear()-3);let b=await g.L.getProjectTrends("",{type:"monthly",startDate:a.toISOString(),endDate:new Date().toISOString()}),c={Winter:{projects:[],budgets:[],completed:[]},Spring:{projects:[],budgets:[],completed:[]},Summer:{projects:[],budgets:[],completed:[]},Fall:{projects:[],budgets:[],completed:[]}};return b.trends?.forEach(a=>{let b=new Date(a.month).getMonth()+1,d="";c[d=[12,1,2].includes(b)?"Winter":[3,4,5].includes(b)?"Spring":[6,7,8].includes(b)?"Summer":"Fall"].projects.push(a.totalProjects||0),c[d].budgets.push(a.averageBudget||0),c[d].completed.push(a.completedProjects||0)}),Object.entries(c).map(([a,b])=>{let c=b.projects.reduce((a,b)=>a+b,0)/(b.projects.length||1),d=b.budgets.reduce((a,b)=>a+b,0)/(b.budgets.length||1),e=b.projects.reduce((a,b)=>a+b,0),f=b.completed.reduce((a,b)=>a+b,0);return{season:a,avgProjects:Math.round(c),avgBudget:Math.round(100*d)/100,completionRate:Math.round(10*(e>0?f/e*100:0))/10}})}catch(a){return h.Rm.error("Error fetching seasonal trends:",{data:a},"trend-analytics"),[]}}static calculateGrowthRate(a,b){return 0===b?100*(a>0):Math.round((a-b)/b*1e3)/10}static buildWhereClause(a){let b=["status NOT IN ('archived', 'cancelled', 'deleted')"];if(a.startDate&&b.push(`created_at >= '${a.startDate.toISOString()}'`),a.endDate&&b.push(`created_at <= '${a.endDate.toISOString()}'`),a.clientId&&b.push(`client_id = '${a.clientId}'`),a.status&&a.status.length>0){let c=a.status.map(a=>`'${a}'`).join(",");b.push(`status IN (${c})`)}return a.includeInactive&&(b[0]="TRUE"),b.join(" AND ")}}class l{static async getProjectSummary(){return i.getProjectSummary()}static async getProjectsByStatus(){return i.getProjectsByStatus()}static async getProjectsByClient(){return i.getProjectsByClient()}static async getMonthlyCompletionTrends(a=12){return k.getMonthlyCompletionTrends(a)}static async getBudgetAnalysis(){return k.getBudgetAnalysis()}static async getOverdueProjects(){return j.getOverdueProjects()}static async getProjectPerformanceMetrics(){return j.getProjectPerformanceMetrics()}static async getProjectTimeline(){return k.getProjectTimeline()}}let m={getAll:async a=>d.F.getAllProjects(a),getById:async a=>d.F.getProjectById(a),create:async a=>f.createProject(a),update:async(a,b)=>f.updateProject(a,b),remove:async a=>f.deleteProject(a),getProjectSummary:async()=>l.getProjectSummary()};var n=c(26642);async function o(a){return m.remove(a)}let p={getAll:async function(a){return m.getAll(a)},getById:async function(a){return m.getById(a)},create:async function(a){return m.create(a)},update:async function(a,b){return m.update(a,b)},delete:o,remove:o,getByClientId:async function(a){return m.getAll({clientId:[a]})},getActiveProjects:async function(){return m.getAll({status:[n.Ks.ACTIVE]})},generatePhases:async()=>[],getPhases:async()=>[],getPhase:async()=>null,updatePhase:async()=>({}),getSteps:async()=>[],updateStep:async()=>({}),getTasks:async()=>[],createTask:async()=>({}),updateTask:async()=>({}),initializeProjectPhases:async()=>[],getSummary:async()=>({total:0,active:0,completed:0}),getRecent:async()=>[],getOverdue:async()=>[],getByStatus:async()=>[],getCountByType:async()=>({}),getEndingSoon:async()=>[],calculateBudgetVariance:async()=>0,getProjectSummary:async()=>({total:0,active:0,completed:0}),getProjectHierarchy:async()=>null,subscribe:()=>()=>{},subscribeToList:()=>()=>{},subscribeToPhases:()=>()=>{},subscribeToSteps:()=>()=>{},subscribeToTasks:()=>()=>{},subscribeToHierarchy:()=>()=>{},unsubscribeAll:()=>{},subscribeToProject:()=>()=>{},subscribeToProjects:()=>()=>{}}},26642:(a,b,c)=>{c.d(b,{ko:()=>h,bx:()=>f,Ks:()=>d,gM:()=>e,e1:()=>i});var d=function(a){return a.PLANNING="planning",a.ACTIVE="active",a.ON_HOLD="on_hold",a.COMPLETED="completed",a.CANCELLED="cancelled",a}({}),e=function(a){return a.FIBRE="fibre",a.NETWORK="network",a.INFRASTRUCTURE="infrastructure",a.MAINTENANCE="maintenance",a.SURVEY="survey",a.INSTALLATION="installation",a.OTHER="other",a}({}),f=function(a){return a.LOW="low",a.MEDIUM="medium",a.HIGH="high",a.CRITICAL="critical",a}({}),g=function(a){return a.PLANNING="planning",a.DESIGN="design",a.PROCUREMENT="procurement",a.CONSTRUCTION="construction",a.TESTING="testing",a.COMMISSIONING="commissioning",a.HANDOVER="handover",a.MAINTENANCE="maintenance",a}({}),h=function(a){return a.NOT_STARTED="not_started",a.IN_PROGRESS="in_progress",a.COMPLETED="completed",a.ON_HOLD="on_hold",a.CANCELLED="cancelled",a}({}),i=function(a){return a.NOT_STARTED="not_started",a.IN_PROGRESS="in_progress",a.COMPLETED="completed",a.BLOCKED="blocked",a.CANCELLED="cancelled",a.DEFERRED="deferred",a}({});g.PLANNING,g.DESIGN,g.PROCUREMENT,g.CONSTRUCTION,g.TESTING,g.HANDOVER},33790:(a,b,c)=>{c.d(b,{S:()=>f});var d=c(49888);let e="/api",f={async getAllProjects(a){try{let b=`${e}/projects`,c=new URLSearchParams;a&&(a.status&&c.append("status",a.status),a.clientId&&c.append("clientId",a.clientId)),c.toString()&&(b+=`?${c.toString()}`);let d=await fetch(b);if(!d.ok)throw Error(`Failed to fetch projects: ${d.status}`);return(await d.json()).data||[]}catch(a){throw d.Rm.error("Error fetching projects:",{error:a},"projectApi"),a}},async getProjectById(a){try{let b=await fetch(`${e}/projects?id=${a}`);if(!b.ok)throw Error(`Failed to fetch project: ${b.status}`);return(await b.json()).data||null}catch(b){throw d.Rm.error("Error fetching project by ID:",{error:b,id:a},"projectApi"),b}},async getProjectsByClient(a){try{let b=await fetch(`${e}/projects?clientId=${a}`);if(!b.ok)throw Error(`Failed to fetch projects by client: ${b.status}`);return(await b.json()).data||[]}catch(b){return d.Rm.error("Error fetching projects by client:",{error:b,clientId:a},"projectApi"),[]}},async getProjectsByStatus(a){try{let b=await fetch(`${e}/projects?status=${a}`);if(!b.ok)throw Error(`Failed to fetch projects by status: ${b.status}`);return(await b.json()).data||[]}catch(b){return d.Rm.error("Error fetching projects by status:",{error:b,status:a},"projectApi"),[]}},async searchProjects(a){try{let b=await fetch(`${e}/projects?search=${encodeURIComponent(a)}`);if(!b.ok)throw Error(`Failed to search projects: ${b.status}`);return(await b.json()).data||[]}catch(b){return d.Rm.error("Error searching projects:",{error:b,searchTerm:a},"projectApi"),[]}},async getActiveProjects(){try{let a=await fetch(`${e}/projects`);if(!a.ok)throw Error(`Failed to fetch active projects: ${a.status}`);return((await a.json()).data||[]).map(a=>({...a,id:a.id,name:a.project_name||a.name,code:a.project_code||a.code,clientId:a.client_id||a.clientId,clientName:a.client_name||a.clientName,projectType:a.project_type||a.projectType,startDate:a.start_date||a.startDate,endDate:a.end_date||a.endDate,projectManager:a.project_manager||a.projectManager,description:a.description,status:a.status})).filter(a=>!["completed","archived","cancelled","on_hold"].includes(a.status?.toLowerCase()||""))}catch(a){return d.Rm.error("Error fetching active projects:",{error:a},"projectApi"),[]}},async createProject(a){try{let b=await fetch(`${e}/projects`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({project_code:a.code,project_name:a.name,client_id:a.clientId,description:a.description,project_type:a.projectType,status:a.status||"PLANNING",priority:a.priority||"MEDIUM",start_date:a.startDate,end_date:a.endDate,budget:a.budget,project_manager:a.projectManagerId,location:a.location})});if(!b.ok)throw Error(`Failed to create project: ${b.status}`);let c=await b.json();return c.data?.id||""}catch(b){throw d.Rm.error("Error creating project:",{error:b,data:a},"projectApi"),b}},async updateProject(a,b){try{let c=await fetch(`${e}/projects?id=${a}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({project_name:b.name,project_code:b.code,client_id:b.clientId,description:b.description,project_type:b.projectType,status:b.status,priority:b.priority,start_date:b.startDate,end_date:b.endDate,budget:b.budget,project_manager:b.projectManagerId,location:b.location})});if(!c.ok)throw Error(`Failed to update project: ${c.status}`)}catch(c){throw d.Rm.error("Error updating project:",{error:c,id:a,data:b},"projectApi"),c}},async deleteProject(a){try{let b=await fetch(`${e}/projects?id=${a}`,{method:"DELETE"});if(!b.ok)throw Error(`Failed to delete project: ${b.status}`)}catch(b){throw d.Rm.error("Error deleting project:",{error:b,id:a},"projectApi"),b}},async updateProjectStatus(a,b){try{let c=await fetch(`${e}/projects?id=${a}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({status:b})});if(!c.ok)throw Error(`Failed to update project status: ${c.status}`)}catch(c){throw d.Rm.error("Error updating project status:",{error:c,id:a,status:b},"projectApi"),c}},async updateProjectProgress(a,b){try{let c=await fetch(`${e}/projects?id=${a}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({progress:b})});if(!c.ok)throw Error(`Failed to update project progress: ${c.status}`)}catch(c){throw d.Rm.error("Error updating project progress:",{error:c,id:a,progress:b},"projectApi"),c}},async updateProjectBudget(a,b){try{let c=await fetch(`${e}/projects?id=${a}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({budget:b})});if(!c.ok)throw Error(`Failed to update project budget: ${c.status}`)}catch(c){throw d.Rm.error("Error updating project budget:",{error:c,id:a,budget:b},"projectApi"),c}},async assignProjectToClient(a,b){try{let c=await fetch(`${e}/projects?id=${a}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({client_id:b})});if(!c.ok)throw Error(`Failed to assign project to client: ${c.status}`)}catch(c){throw d.Rm.error("Error assigning project to client:",{error:c,projectId:a,clientId:b},"projectApi"),c}},async updateProjectDates(a,b,c){try{let d=await fetch(`${e}/projects?id=${a}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({start_date:b,end_date:c})});if(!d.ok)throw Error(`Failed to update project dates: ${d.status}`)}catch(e){throw d.Rm.error("Error updating project dates:",{error:e,id:a,startDate:b,endDate:c},"projectApi"),e}}}},54659:(a,b,c)=>{c.d(b,{F:()=>e});var d=c(33790);class e{static async getAllProjects(a){return d.S.getAllProjects(a)}static async getProjectById(a){return d.S.getProjectById(a)}static async getProjectsByClient(a){return d.S.getProjectsByClient(a)}static async getProjectsByStatus(a){return d.S.getProjectsByStatus(a)}static async searchProjects(a){return d.S.searchProjects(a)}static async getActiveProjects(){return d.S.getActiveProjects()}static async getProjectsPaginated(a=10,b=0,c){let e=await d.S.getAllProjects(c);return{projects:e.slice(b,b+a),total:e.length}}}},56174:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.d(b,{By:()=>i,Ww:()=>j,bL:()=>k,eW:()=>l}),c(82015);var e=c(28462),f=c(26053),g=c(49888),h=a([e]);e=(h.then?(await h)():h)[0];let m={all:["projects"],lists:()=>[...m.all,"list"],list:a=>[...m.lists(),a],details:()=>[...m.all,"detail"],detail:a=>[...m.details(),a],hierarchy:a=>[...m.all,"hierarchy",a],summary:()=>[...m.all,"summary"]};function i(a,b=!0){return(0,e.useQuery)({queryKey:m.detail(a),queryFn:()=>f.$p.getById(a),enabled:!!a&&b,staleTime:3e5,gcTime:6e5})}function j(a,b=!0){return(0,e.useQuery)({queryKey:m.hierarchy(a),queryFn:async()=>{let b=await f.$p.getById(a);return b?{project:b,phases:[]}:null},enabled:!!a&&b,staleTime:12e4,gcTime:3e5})}function k(){let a=(0,e.useQueryClient)();return(0,e.useMutation)({mutationFn:a=>f.$p.create(a),onSuccess:()=>{a.invalidateQueries({queryKey:m.lists()}),a.invalidateQueries({queryKey:m.summary()})},onError:a=>{g.Rm.error("Failed to create project:",{data:a},"useProjects")}})}function l(){let a=(0,e.useQueryClient)();return(0,e.useMutation)({mutationFn:a=>f.$p.delete(a),onSuccess:(b,c)=>{a.removeQueries({queryKey:m.detail(c)}),a.removeQueries({queryKey:m.hierarchy(c)}),a.invalidateQueries({queryKey:m.lists()}),a.invalidateQueries({queryKey:m.summary()})},onError:a=>{g.Rm.error("Failed to delete project:",{data:a},"useProjects")}})}d()}catch(a){d(a)}})},70039:(a,b,c)=>{c.d(b,{L:()=>e});class d{async fetch(a,b){try{let c=await fetch(`/api${a}`,{...b,headers:{"Content-Type":"application/json",...b?.headers}});if(!c.ok)throw Error(`API request failed: ${c.status} ${c.statusText}`);let d=await c.json();if(!d.success)throw Error(d.error||"API request failed");return d.data||d}catch(b){throw console.error(`Analytics API error (${a}):`,b),b}}async getDashboardStats(a){let b=new URLSearchParams;return a?.startDate&&b.append("startDate",a.startDate),a?.endDate&&b.append("endDate",a.endDate),this.fetch(`/analytics/dashboard/stats?${b}`)}async getDashboardSummary(a){let b=new URLSearchParams({period:a.type});return this.fetch(`/analytics/dashboard/summary?${b}`)}async getDashboardTrends(a,b,c="month"){let d=new URLSearchParams({startDate:a,endDate:b,groupBy:c});return this.fetch(`/analytics/dashboard/trends?${d}`)}async getProjectSummary(a){let b=new URLSearchParams;return a&&b.append("projectId",a),this.fetch(`/analytics/projects/summary?${b}`)}async getProjectPerformance(a,b){let c=new URLSearchParams({projectId:a,metrics:b.join(",")});return this.fetch(`/analytics/projects/performance?${c}`)}async getProjectTrends(a,b){let c=new URLSearchParams({projectId:a,period:b.type,...b.startDate&&{startDate:b.startDate},...b.endDate&&{endDate:b.endDate}});return this.fetch(`/analytics/projects/trends?${c}`)}async compareProjects(a,b){return this.fetch("/analytics/projects/comparison",{method:"POST",body:JSON.stringify({projectIds:a,metrics:b})})}async getKPIs(a){let b=new URLSearchParams;return a&&b.append("category",a),this.fetch(`/analytics/kpis?${b}`)}async calculateKPIs(a,b){return this.fetch("/analytics/kpis/calculate",{method:"POST",body:JSON.stringify({kpiIds:a,parameters:b})})}async getKPITargets(){return this.fetch("/analytics/kpis/targets")}async setKPITargets(a){return this.fetch("/analytics/kpis/targets",{method:"POST",body:JSON.stringify({targets:a})})}async getStaffStatistics(a){let b=new URLSearchParams;return a&&b.append("filters",JSON.stringify(a)),this.fetch(`/analytics/staff/statistics?${b}`)}async getStaffPerformance(a,b){let c=new URLSearchParams;return a&&c.append("staffId",a),b&&c.append("period",b.type),this.fetch(`/analytics/staff/performance?${c}`)}async getStaffTrends(a,b=12){let c=new URLSearchParams({months:b.toString()});return a&&c.append("department",a),this.fetch(`/analytics/staff/trends?${c}`)}async getTeamAnalytics(a){let b=new URLSearchParams;return a&&b.append("teamId",a),this.fetch(`/analytics/staff/teams?${b}`)}async getUtilizationRates(a,b){let c=new URLSearchParams({period:a.type});return b&&c.append("department",b),a.startDate&&c.append("startDate",a.startDate),a.endDate&&c.append("endDate",a.endDate),this.fetch(`/analytics/staff/utilization?${c}`)}async getFinancialSummary(a,b,c){let d=new URLSearchParams({period:a.type});return b&&d.append("projectId",b),c&&d.append("clientId",c),this.fetch(`/analytics/financial/summary?${d}`)}async getBudgetAnalysis(a,b,c){let d=new URLSearchParams;return a&&d.append("projectId",a),b&&d.append("clientId",b),c&&d.append("department",c),this.fetch(`/analytics/financial/budgets?${d}`)}async generateReport(a,b){return this.fetch("/analytics/reports/generate",{method:"POST",body:JSON.stringify({reportType:a,parameters:b})})}}let e=new d},77020:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.d(b,{cn:()=>h});var e=c(50802),f=c(75979),g=a([e,f]);function h(...a){return(0,f.twMerge)((0,e.clsx)(a))}[e,f]=g.then?(await g)():g,d()}catch(a){d(a)}})}};