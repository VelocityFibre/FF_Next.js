"use strict";(()=>{var a={};a.id=7926,a.ids=[7926],a.modules={6375:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.r(b),c.d(b,{default:()=>g});var e=c(86669),f=a([e]);async function g(a,b){if("GET"!==a.method)return b.status(405).json({error:"Method not allowed"});try{let a=Date.now();await e.db.$queryRaw`SELECT 1`;let c=Date.now()-a;return b.status(200).json({status:"healthy",responseTime:`${c}ms`,timestamp:new Date().toISOString()})}catch(a){return console.error("Database health check failed:",a),b.status(503).json({status:"unhealthy",error:"Database connection failed",timestamp:new Date().toISOString()})}}e=(f.then?(await f)():f)[0],d()}catch(a){d(a)}})},10762:a=>{a.exports=import("@neondatabase/serverless")},62662:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.r(b),c.d(b,{config:()=>o,default:()=>n,handler:()=>m});var e=c(29046),f=c(8667),g=c(33480),h=c(86435),i=c(6375),j=c(58112),k=c(18766),l=a([i]);i=(l.then?(await l)():l)[0];let n=(0,h.M)(i,"default"),o=(0,h.M)(i,"config"),p=new g.PagesAPIRouteModule({definition:{kind:f.A.PAGES_API,page:"/api/health/db",pathname:"/api/health/db",bundlePath:"",filename:""},userland:i,distDir:".next",relativeProjectDir:""});async function m(a,b,c){let d=await p.prepare(a,b,{srcPage:"/api/health/db"});if(!d){b.statusCode=400,b.end("Bad Request"),null==c.waitUntil||c.waitUntil.call(c,Promise.resolve());return}let{query:f,params:g,prerenderManifest:h,routerServerContext:i}=d;try{let c=a.method||"GET",d=(0,j.getTracer)(),e=d.getActiveScopeSpan(),l=p.instrumentationOnRequestError.bind(p),m=async e=>p.render(a,b,{query:{...f,...g},params:g,allowedRevalidateHeaderKeys:[],multiZoneDraftMode:!1,trustHostHeader:!1,previewProps:h.preview,propagateError:!1,dev:p.isDev,page:"/api/health/db",internalRevalidate:null==i?void 0:i.revalidate,onError:(...b)=>l(a,...b)}).finally(()=>{if(!e)return;e.setAttributes({"http.status_code":b.statusCode,"next.rsc":!1});let f=d.getRootSpanAttributes();if(!f)return;if(f.get("next.span_type")!==k.BaseServerSpan.handleRequest)return void console.warn(`Unexpected root span type '${f.get("next.span_type")}'. Please report this Next.js issue https://github.com/vercel/next.js`);let g=f.get("next.route");if(g){let a=`${c} ${g}`;e.setAttributes({"next.route":g,"http.route":g,"next.span_name":a}),e.updateName(a)}else e.updateName(`${c} ${a.url}`)});e?await m(e):await d.withPropagatedContext(a.headers,()=>d.trace(k.BaseServerSpan.handleRequest,{spanName:`${c} ${a.url}`,kind:j.SpanKind.SERVER,attributes:{"http.method":c,"http.target":a.url}},m))}catch(a){if(p.isDev)throw a;(0,e.sendError)(b,500,"Internal Server Error")}finally{null==c.waitUntil||c.waitUntil.call(c,Promise.resolve())}}d()}catch(a){d(a)}})},75600:a=>{a.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},86669:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.d(b,{ll:()=>i});var e=c(10762),f=a([e]);e=(f.then?(await f)():f)[0];let g=Number(process.env.NEON_POOL_QUERY_LIMIT||10);!Number.isNaN(g)&&g>0&&(e.neonConfig.poolQueryLimit=g);let h="__FF_NEON_SQL__",i=function(){let a=globalThis;return a[h]||(a[h]=function(){let a=process.env.DATABASE_URL;if(!a)throw Error("DATABASE_URL is not set. Please configure it in your environment.");return(0,e.neon)(a)}()),a[h]}();d()}catch(a){d(a)}})}};var b=require("../../../webpack-api-runtime.js");b.C(a);var c=b.X(0,[7169],()=>b(b.s=62662));module.exports=c})();