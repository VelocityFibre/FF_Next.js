"use strict";(()=>{var a={};a.id=6284,a.ids=[6284],a.modules={10762:a=>{a.exports=import("@neondatabase/serverless")},11094:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.r(b),c.d(b,{config:()=>o,default:()=>n,handler:()=>m});var e=c(29046),f=c(8667),g=c(33480),h=c(86435),i=c(75769),j=c(58112),k=c(18766),l=a([i]);i=(l.then?(await l)():l)[0];let n=(0,h.M)(i,"default"),o=(0,h.M)(i,"config"),p=new g.PagesAPIRouteModule({definition:{kind:f.A.PAGES_API,page:"/api/admin/init-db",pathname:"/api/admin/init-db",bundlePath:"",filename:""},userland:i,distDir:".next",relativeProjectDir:""});async function m(a,b,c){let d=await p.prepare(a,b,{srcPage:"/api/admin/init-db"});if(!d){b.statusCode=400,b.end("Bad Request"),null==c.waitUntil||c.waitUntil.call(c,Promise.resolve());return}let{query:f,params:g,prerenderManifest:h,routerServerContext:i}=d;try{let c=a.method||"GET",d=(0,j.getTracer)(),e=d.getActiveScopeSpan(),l=p.instrumentationOnRequestError.bind(p),m=async e=>p.render(a,b,{query:{...f,...g},params:g,allowedRevalidateHeaderKeys:[],multiZoneDraftMode:!1,trustHostHeader:!1,previewProps:h.preview,propagateError:!1,dev:p.isDev,page:"/api/admin/init-db",internalRevalidate:null==i?void 0:i.revalidate,onError:(...b)=>l(a,...b)}).finally(()=>{if(!e)return;e.setAttributes({"http.status_code":b.statusCode,"next.rsc":!1});let f=d.getRootSpanAttributes();if(!f)return;if(f.get("next.span_type")!==k.BaseServerSpan.handleRequest)return void console.warn(`Unexpected root span type '${f.get("next.span_type")}'. Please report this Next.js issue https://github.com/vercel/next.js`);let g=f.get("next.route");if(g){let a=`${c} ${g}`;e.setAttributes({"next.route":g,"http.route":g,"next.span_name":a}),e.updateName(a)}else e.updateName(`${c} ${a.url}`)});e?await m(e):await d.withPropagatedContext(a.headers,()=>d.trace(k.BaseServerSpan.handleRequest,{spanName:`${c} ${a.url}`,kind:j.SpanKind.SERVER,attributes:{"http.method":c,"http.target":a.url}},m))}catch(a){if(p.isDev)throw a;(0,e.sendError)(b,500,"Internal Server Error")}finally{null==c.waitUntil||c.waitUntil.call(c,Promise.resolve())}}d()}catch(a){d(a)}})},75600:a=>{a.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},75769:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.r(b),c.d(b,{default:()=>g});var e=c(10762),f=a([e]);e=(f.then?(await f)():f)[0];let h=(0,e.neon)(process.env.DATABASE_URL||"postgresql://neondb_owner:npg_jUJCNFiG38aY@ep-mute-brook-a99vppmn-pooler.gwc.azure.neon.tech/neondb?sslmode=require");async function g(a,b){if("POST"!==a.method)return b.status(405).json({error:"Method not allowed"});try{console.log("Initializing database tables..."),await h`
      CREATE TABLE IF NOT EXISTS clients (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        company_name VARCHAR(255) NOT NULL,
        contact_person VARCHAR(255),
        email VARCHAR(255),
        phone VARCHAR(20),
        alternate_phone VARCHAR(20),
        address TEXT,
        city VARCHAR(100),
        state VARCHAR(100),
        country VARCHAR(100) DEFAULT 'USA',
        postal_code VARCHAR(20),
        website VARCHAR(255),
        industry VARCHAR(100),
        client_type VARCHAR(50) DEFAULT 'standard',
        status VARCHAR(20) DEFAULT 'active',
        contract_value DECIMAL(15,2),
        payment_terms VARCHAR(100),
        tax_id VARCHAR(50),
        notes TEXT,
        metadata JSONB DEFAULT '{}',
        created_by UUID,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )`,await h`
      CREATE TABLE IF NOT EXISTS projects (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        project_code VARCHAR(50) NOT NULL UNIQUE,
        project_name VARCHAR(255) NOT NULL,
        client_id UUID REFERENCES clients(id) ON DELETE CASCADE,
        description TEXT,
        project_type VARCHAR(50),
        status VARCHAR(20) DEFAULT 'planning',
        priority VARCHAR(20) DEFAULT 'medium',
        start_date DATE,
        end_date DATE,
        actual_start_date DATE,
        actual_end_date DATE,
        budget DECIMAL(15,2),
        actual_cost DECIMAL(15,2),
        project_manager UUID,
        team_lead UUID,
        location TEXT,
        latitude DECIMAL(10,8),
        longitude DECIMAL(11,8),
        progress_percentage INTEGER DEFAULT 0,
        milestones JSONB DEFAULT '[]',
        deliverables JSONB DEFAULT '[]',
        risks JSONB DEFAULT '[]',
        documents JSONB DEFAULT '[]',
        tags JSONB DEFAULT '[]',
        metadata JSONB DEFAULT '{}',
        created_by UUID,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )`,await h`
      CREATE TABLE IF NOT EXISTS sow_poles (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        project_id UUID REFERENCES projects(id) ON DELETE CASCADE,
        pole_number VARCHAR(255) NOT NULL,
        location VARCHAR(500),
        pole_type VARCHAR(100),
        height DECIMAL(10,2),
        latitude DECIMAL(10,8),
        longitude DECIMAL(11,8),
        status VARCHAR(50) DEFAULT 'pending',
        installation_date DATE,
        installed_by VARCHAR(255),
        inspection_status VARCHAR(50),
        inspection_date DATE,
        notes TEXT,
        photos JSONB DEFAULT '[]',
        metadata JSONB DEFAULT '{}',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )`,await h`
      CREATE TABLE IF NOT EXISTS sow_drops (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        project_id UUID REFERENCES projects(id) ON DELETE CASCADE,
        drop_number VARCHAR(255) NOT NULL,
        address VARCHAR(500),
        drop_type VARCHAR(100),
        cable_length DECIMAL(10,2),
        cable_type VARCHAR(100),
        customer_name VARCHAR(255),
        customer_phone VARCHAR(20),
        latitude DECIMAL(10,8),
        longitude DECIMAL(11,8),
        status VARCHAR(50) DEFAULT 'pending',
        installation_date DATE,
        installed_by VARCHAR(255),
        tested BOOLEAN DEFAULT FALSE,
        test_date DATE,
        test_results JSONB DEFAULT '{}',
        notes TEXT,
        photos JSONB DEFAULT '[]',
        metadata JSONB DEFAULT '{}',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )`,await h`
      CREATE TABLE IF NOT EXISTS sow_fibre (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        project_id UUID REFERENCES projects(id) ON DELETE CASCADE,
        cable_id VARCHAR(255) NOT NULL,
        cable_type VARCHAR(100),
        cable_size VARCHAR(50),
        fiber_count INTEGER,
        start_location VARCHAR(255),
        end_location VARCHAR(255),
        start_latitude DECIMAL(10,8),
        start_longitude DECIMAL(11,8),
        end_latitude DECIMAL(10,8),
        end_longitude DECIMAL(11,8),
        length DECIMAL(10,2),
        installation_method VARCHAR(100),
        status VARCHAR(50) DEFAULT 'pending',
        installation_date DATE,
        installed_by VARCHAR(255),
        splicing_complete BOOLEAN DEFAULT FALSE,
        splicing_date DATE,
        testing_complete BOOLEAN DEFAULT FALSE,
        test_date DATE,
        test_results JSONB DEFAULT '{}',
        notes TEXT,
        route_map JSONB DEFAULT '[]',
        metadata JSONB DEFAULT '{}',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )`,await h`CREATE INDEX IF NOT EXISTS idx_clients_company_name ON clients(company_name)`,await h`CREATE INDEX IF NOT EXISTS idx_clients_status ON clients(status)`,await h`CREATE INDEX IF NOT EXISTS idx_projects_code ON projects(project_code)`,await h`CREATE INDEX IF NOT EXISTS idx_projects_status ON projects(status)`,await h`CREATE INDEX IF NOT EXISTS idx_sow_poles_project ON sow_poles(project_id)`,await h`CREATE INDEX IF NOT EXISTS idx_sow_poles_status ON sow_poles(status)`,await h`CREATE INDEX IF NOT EXISTS idx_sow_drops_project ON sow_drops(project_id)`,await h`CREATE INDEX IF NOT EXISTS idx_sow_drops_status ON sow_drops(status)`,await h`CREATE INDEX IF NOT EXISTS idx_sow_fibre_project ON sow_fibre(project_id)`,await h`CREATE INDEX IF NOT EXISTS idx_sow_fibre_status ON sow_fibre(status)`;let[a]=await h`SELECT COUNT(*) FROM projects`,[c]=await h`SELECT COUNT(*) FROM sow_poles`,[d]=await h`SELECT COUNT(*) FROM sow_drops`,[e]=await h`SELECT COUNT(*) FROM sow_fibre`;return b.status(200).json({success:!0,message:"Database initialized successfully",statistics:{projects:a.count,sow_poles:c.count,sow_drops:d.count,sow_fibre:e.count}})}catch(a){return console.error("Error initializing database:",a),b.status(500).json({error:"Failed to initialize database",details:a.message})}}d()}catch(a){d(a)}})}};var b=require("../../../webpack-api-runtime.js");b.C(a);var c=b.X(0,[7169],()=>b(b.s=11094));module.exports=c})();